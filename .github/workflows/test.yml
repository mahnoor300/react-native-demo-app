name: Generate debug APK

on:
  push:
  workflow_dispatch:

jobs:
  apk:
    name: Generate debug APK
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - uses: actions/checkout@v2  # Use v2 of the checkout action

      # Step 2: Set up JDK 17 (to match Android Gradle plugin requirement)
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'

      # Step 3: Clean the project (remove node_modules and android/build)
      - name: Clean project
        run: |
          rm -rf node_modules
          rm -rf android/build
          yarn install --no-frozen-lockfile  # Reinstall dependencies

      # Step 4: Grant execute permissions to gradlew
      - name: Grant execute permissions to gradlew
        run: chmod +x ./android/gradlew

      # Step 5: Run the build process to generate the debug APK
      - name: Build debug APK
        run: ./android/gradlew assembleDebug --stacktrace

      # Step 6: Rename APK for output (if OUTPUT_NAME is set)
      - name: Rename APK
        run: |
          if [ -z "${{ env.OUTPUT_NAME }}" ]; then
            echo "OUTPUT_NAME is not set, using default name."
            mv "./android/app/build/outputs/apk/debug/app-debug.apk" "./android/app/build/outputs/apk/debug/app-debug-renamed.apk"
          else
            echo "Using custom output name: ${{ env.OUTPUT_NAME }}"
            mv "./android/app/build/outputs/apk/debug/app-debug.apk" "./android/app/build/outputs/apk/debug/${{ env.OUTPUT_NAME }}.apk"
          fi

      # Step 7: Upload the APK as an artifact
      - name: Upload debug APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: android/app/build/outputs/apk/debug/app-debug.apk  # Update the correct APK path
